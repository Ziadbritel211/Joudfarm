// screens/ChatScreen.js
import React, { useState, useEffect } from 'react';
import {
  View,
  Text,
  TextInput,
  Button,
  FlatList,
  StyleSheet,
  KeyboardAvoidingView,
  Platform
} from 'react-native';
import {
  collection,
  addDoc,
  query,
  orderBy,
  onSnapshot,
  serverTimestamp,
  updateDoc,
  doc,
  getDocs,
} from 'firebase/firestore';
import { db, auth } from '../firebase';

export default function ChatScreen({ route, navigation }) {
  // Expecting chatId and otherUserName to be passed in navigation params.
  const { chatId, otherUserName } = route.params;
  const [messages, setMessages] = useState([]);
  const [inputMessage, setInputMessage] = useState('');

  useEffect(() => {
    // Mark messages as read when the chat screen opens (for messages where recipientId equals current user's uid)
    const markMessagesRead = async () => {
      const messagesRef = collection(db, 'chats', chatId, 'messages');
      const q = query(messagesRef, orderBy('createdAt', 'asc'));
      const snapshot = await getDocs(q);
      snapshot.docs.forEach(async (docSnap) => {
        const messageData = docSnap.data();
        if (messageData.recipientId === auth.currentUser.uid && !messageData.read) {
          await updateDoc(doc(db, 'chats', chatId, 'messages', docSnap.id), { read: true });
        }
      });
    };

    markMessagesRead();

    const messagesRef = collection(db, 'chats', chatId, 'messages');
    const q = query(messagesRef, orderBy('createdAt', 'asc'));
    const unsubscribe = onSnapshot(q, (querySnapshot) => {
      const msgs = querySnapshot.docs.map((doc) => ({ id: doc.id, ...doc.data() }));
      setMessages(msgs);
    });
    return unsubscribe;
  }, [chatId]);

  const sendMessage = async () => {
    if (inputMessage.trim().length === 0) return;
    // Determine recipientId based on chatId. Assumes chatId is generated by sorting two UIDs.
    const ids = chatId.split('_');
    const recipientId = ids.find(id => id !== auth.currentUser.uid);
    try {
      await addDoc(collection(db, 'chats', chatId, 'messages'), {
        text: inputMessage,
        senderId: auth.currentUser.uid,
        recipientId,
        createdAt: serverTimestamp(),
        read: false,
      });
      setInputMessage('');
    } catch (error) {
      console.error('Error sending message:', error);
    }
  };

  const renderItem = ({ item }) => {
    const isMyMessage = item.senderId === auth.currentUser.uid;
    return (
      <View style={[
          styles.messageContainer,
          isMyMessage ? styles.myMessage : styles.theirMessage,
        ]}>
        <Text style={styles.messageText}>{item.text}</Text>
        <Text style={styles.timestamp}>
          {item.createdAt && item.createdAt.seconds ? new Date(item.createdAt.seconds * 1000).toLocaleTimeString() : ''}
        </Text>
      </View>
    );
  };

  return (
    <KeyboardAvoidingView style={styles.container} behavior={Platform.OS === 'ios' ? 'padding' : undefined}>
      <Text style={styles.header}>Chat with {otherUserName}</Text>
      <FlatList data={messages} renderItem={renderItem} keyExtractor={item => item.id} style={styles.messagesList} />
      <View style={styles.inputContainer}>
        <TextInput style={styles.input} value={inputMessage} onChangeText={setInputMessage} placeholder="Type a message..." />
        <Button title="Send" onPress={sendMessage} />
      </View>
    </KeyboardAvoidingView>
  );
}

const styles = StyleSheet.create({
  container: { flex: 1 },
  header: { padding: 10, fontSize: 20, fontWeight: 'bold', textAlign: 'center', backgroundColor: '#f2f2f2' },
  messagesList: { flex: 1, padding: 10 },
  messageContainer: { marginVertical: 5, padding: 10, borderRadius: 10, maxWidth: '80%' },
  myMessage: { alignSelf: 'flex-end', backgroundColor: '#dcf8c6' },
  theirMessage: { alignSelf: 'flex-start', backgroundColor: '#fff' },
  messageText: { fontSize: 16 },
  timestamp: { fontSize: 10, color: 'gray', marginTop: 5, textAlign: 'right' },
  inputContainer: { flexDirection: 'row', padding: 10, borderTopWidth: 1, borderColor: '#ccc', alignItems: 'center' },
  input: { flex: 1, borderWidth: 1, borderColor: '#ccc', borderRadius: 20, paddingHorizontal: 15, marginRight: 10, height: 40 },
});
